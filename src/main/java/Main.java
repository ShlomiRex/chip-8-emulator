import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.HexFormat;

public class Main {
    public static byte[] hexStringToByteArray(String s) {
        StringBuilder new_s = new StringBuilder();
        for (int i = 0; i < s.length(); i+=5) {
            new_s.append(s.charAt(i + 2));
            new_s.append(s.charAt(i + 3));
        }
        return HexFormat.of().parseHex(new_s.toString());
    }

    public static void main(String[] args) throws InterruptedException, IOException {
        Logger logger = LoggerFactory.getLogger(Main.class);

        // Read from ROM file
//        String ch8Program = "test_rom/test_opcode.ch8";
//        //String ch8Program = "other_roms/IBM Logo.ch8";
//        InputStream inputStream = Main.class.getClassLoader().getResourceAsStream(ch8Program);
//        byte[] program = new byte[4096];
//        int bytes_read = inputStream.read(program);

        // Custom programs

        // Letter E at location 1,0
        //byte[] program = hexStringToByteArray("0x12 0x09 0xF8 0x80 0x80 0xF8 0x80 0x80 0xF8 0x60 0x01 0x61 0x00 0xA2 0x02 0xD0 0x17");

        // Stickman that is moveable
        //byte[] program = hexStringToByteArray("0xC1 0x1F 0xC2 0x0F 0xA2 0x30 0xD1 0x28 0xD1 0x28 0x60 0x05 0xE0 0xA1 0x72 0xFF 0x60 0x08 0xE0 0xA1 0x72 0x01 0x60 0x07 0xE0 0xA1 0x71 0xFF 0x60 0x09 0xE0 0xA1 0x71 0x01 0xD1 0x28 0xFF 0x07 0x3F 0x00 0x12 0x24 0x6F 0x03 0xFF 0x15 0x12 0x08 0x70 0x70 0x20 0x70 0xA8 0x20 0x50 0x50");

        // Moving letter E across the columns
        //byte[] program = hexStringToByteArray("0x12 0x09 0xF8 0x80 0x80 0xF8 0x80 0x80 0xF8 0xA2 0x02 0x60 0x00 0x61 0x00 0xD0 0x17 0xD0 0x17 0x70 0x01 0xD0 0x17 0xFF 0x07 0x3F 0x00 0x12 0x17 0x6F 0x0F 0xFF 0x15 0x12 0x11");

        // Keypad tester
        byte[] program = hexStringToByteArray("0x12 0x29 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x02 0x03 0x0C 0x04 0x05 0x06 0x0D 0x07 0x08 0x09 0x0E 0x0A 0x00 0x0B 0x0F 0x7E 0xFF 0xFF 0xFF 0xFF 0xFF 0x7E 0x61 0x12 0x62 0x01 0x63 0x00 0xA2 0x12 0xF3 0x1E 0xF0 0x65 0xF0 0x29 0xD1 0x25 0x71 0x08 0x41 0x32 0x72 0x08 0x41 0x32 0x61 0x12 0x73 0x01 0x33 0x10 0x12 0x2F 0x61 0x01 0x62 0x10 0x63 0x00 0xA2 0x02 0xF0 0x65 0x30 0x00 0x12 0x63 0xE1 0x9E 0x12 0x61 0x60 0x01 0xA2 0x22 0xD2 0x37 0x12 0x6D 0xE1 0xA1 0x12 0x6D 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x02 0xF0 0x55 0x61 0x02 0x62 0x18 0x63 0x00 0xA2 0x03 0xF0 0x65 0x30 0x00 0x12 0x8B 0xE1 0x9E 0x12 0x89 0x60 0x01 0xA2 0x22 0xD2 0x37 0x12 0x95 0xE1 0xA1 0x12 0x95 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x03 0xF0 0x55 0x61 0x03 0x62 0x20 0x63 0x00 0xA2 0x04 0xF0 0x65 0x30 0x00 0x12 0xB3 0xE1 0x9E 0x12 0xB1 0x60 0x01 0xA2 0x22 0xD2 0x37 0x12 0xBD 0xE1 0xA1 0x12 0xBD 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x04 0xF0 0x55 0x61 0x0C 0x62 0x28 0x63 0x00 0xA2 0x05 0xF0 0x65 0x30 0x00 0x12 0xDB 0xE1 0x9E 0x12 0xD9 0x60 0x01 0xA2 0x22 0xD2 0x37 0x12 0xE5 0xE1 0xA1 0x12 0xE5 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x05 0xF0 0x55 0x61 0x04 0x62 0x10 0x63 0x08 0xA2 0x06 0xF0 0x65 0x30 0x00 0x13 0x03 0xE1 0x9E 0x13 0x01 0x60 0x01 0xA2 0x22 0xD2 0x37 0x13 0x0D 0xE1 0xA1 0x13 0x0D 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x06 0xF0 0x55 0x61 0x05 0x62 0x18 0x63 0x08 0xA2 0x07 0xF0 0x65 0x30 0x00 0x13 0x2B 0xE1 0x9E 0x13 0x29 0x60 0x01 0xA2 0x22 0xD2 0x37 0x13 0x35 0xE1 0xA1 0x13 0x35 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x07 0xF0 0x55 0x61 0x06 0x62 0x20 0x63 0x08 0xA2 0x08 0xF0 0x65 0x30 0x00 0x13 0x53 0xE1 0x9E 0x13 0x51 0x60 0x01 0xA2 0x22 0xD2 0x37 0x13 0x5D 0xE1 0xA1 0x13 0x5D 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x08 0xF0 0x55 0x61 0x0D 0x62 0x28 0x63 0x08 0xA2 0x09 0xF0 0x65 0x30 0x00 0x13 0x7B 0xE1 0x9E 0x13 0x79 0x60 0x01 0xA2 0x22 0xD2 0x37 0x13 0x85 0xE1 0xA1 0x13 0x85 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x09 0xF0 0x55 0x61 0x07 0x62 0x10 0x63 0x10 0xA2 0x0A 0xF0 0x65 0x30 0x00 0x13 0xA3 0xE1 0x9E 0x13 0xA1 0x60 0x01 0xA2 0x22 0xD2 0x37 0x13 0xAD 0xE1 0xA1 0x13 0xAD 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x0A 0xF0 0x55 0x61 0x08 0x62 0x18 0x63 0x10 0xA2 0x0B 0xF0 0x65 0x30 0x00 0x13 0xCB 0xE1 0x9E 0x13 0xC9 0x60 0x01 0xA2 0x22 0xD2 0x37 0x13 0xD5 0xE1 0xA1 0x13 0xD5 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x0B 0xF0 0x55 0x61 0x09 0x62 0x20 0x63 0x10 0xA2 0x0C 0xF0 0x65 0x30 0x00 0x13 0xF3 0xE1 0x9E 0x13 0xF1 0x60 0x01 0xA2 0x22 0xD2 0x37 0x13 0xFD 0xE1 0xA1 0x13 0xFD 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x0C 0xF0 0x55 0x61 0x0E 0x62 0x28 0x63 0x10 0xA2 0x0D 0xF0 0x65 0x30 0x00 0x14 0x1B 0xE1 0x9E 0x14 0x19 0x60 0x01 0xA2 0x22 0xD2 0x37 0x14 0x25 0xE1 0xA1 0x14 0x25 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x0D 0xF0 0x55 0x61 0x0A 0x62 0x10 0x63 0x18 0xA2 0x0E 0xF0 0x65 0x30 0x00 0x14 0x43 0xE1 0x9E 0x14 0x41 0x60 0x01 0xA2 0x22 0xD2 0x37 0x14 0x4D 0xE1 0xA1 0x14 0x4D 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x0E 0xF0 0x55 0x61 0x00 0x62 0x18 0x63 0x18 0xA2 0x0F 0xF0 0x65 0x30 0x00 0x14 0x6B 0xE1 0x9E 0x14 0x69 0x60 0x01 0xA2 0x22 0xD2 0x37 0x14 0x75 0xE1 0xA1 0x14 0x75 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x0F 0xF0 0x55 0x61 0x0B 0x62 0x20 0x63 0x18 0xA2 0x10 0xF0 0x65 0x30 0x00 0x14 0x93 0xE1 0x9E 0x14 0x91 0x60 0x01 0xA2 0x22 0xD2 0x37 0x14 0x9D 0xE1 0xA1 0x14 0x9D 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x10 0xF0 0x55 0x61 0x0F 0x62 0x28 0x63 0x18 0xA2 0x11 0xF0 0x65 0x30 0x00 0x14 0xBB 0xE1 0x9E 0x14 0xB9 0x60 0x01 0xA2 0x22 0xD2 0x37 0x14 0xC5 0xE1 0xA1 0x14 0xC5 0x60 0x00 0xA2 0x22 0xD2 0x37 0xA2 0x11 0xF0 0x55 0x12 0x49");

        int bytes_read = program.length;

        logger.debug("Loading ROM, bytes: " + bytes_read);

        StringBuilder program_bytes_str = new StringBuilder();
        for (int i = 0; i < bytes_read-1; i+=2) {
            byte msb = program[i];
            byte lsb = program[i+1];

            program_bytes_str
                    .append("0x")
                    .append(String.format("%02X", msb))
                    .append(String.format("%02X", lsb))
                    .append(" ");
        }
        // If bytes_read is not even, we need to print last byte.
        if (bytes_read % 2 != 0) {
            program_bytes_str.append(String.format("0x%02X", program[bytes_read-1]));
        }
        logger.debug("Program bytes: " + program_bytes_str);

        Display display = new Display();
        Input input = new Input();

        //TODO: Do something here, don't instantiate Window like this.
        final Window[] window = new Window[1];
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                window[0] = new Window(display, input);
            }
        });
        thread.start();
        thread.join();

        CPU cpu = new CPU(program, bytes_read, display, window[0], input);

        while (true) {
            Thread.sleep(10);
            cpu.tick();
        }
    }
}